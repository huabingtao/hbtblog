(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{505:function(n,s,a){"use strict";a.r(s);var e=a(9),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"面试学习计划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试学习计划"}},[n._v("#")]),n._v(" 面试学习计划")]),n._v(" "),a("h2",{attrs:{id:"vue源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue源码"}},[n._v("#")]),n._v(" Vue源码")]),n._v(" "),a("h3",{attrs:{id:"init-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init-函数"}},[n._v("#")]),n._v(" init 函数")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("export function initMixin (Vue: Class<Component>) {\n  Vue.prototype._init = function (options?: Object) {\n    /* 省略无关代码... */\n    //对生命周期做初始化操作\n    initLifecycle(vm)\n    //事件初始化\n    initEvents(vm)\n    initRender(vm)\n    //调用beforeCreate生命周期函数\n    callHook(vm, 'beforeCreate')\n    initInjections(vm) // resolve injections before data/props\n    //初始化处理data/props/computed/watch等\n    initState(vm)\n    initProvide(vm) // resolve provide after data/props\n    //调用created生命周期函数\n    callHook(vm, 'created')\n    /* 省略无关代码... */\n  }\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("h3",{attrs:{id:"vue响应式原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue响应式原理"}},[n._v("#")]),n._v(" Vue响应式原理")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const Observer = function(data) {\n  // 循环修改为每个属性添加get set\n  for (let key in data) {\n    defineReactive(data, key);\n  }\n}\n\nconst defineReactive = function(obj, key) {\n  // 局部变量dep，用于get set内部调用\n  const dep = new Dep();\n  // 获取当前值\n  let val = obj[key];\n  Object.defineProperty(obj, key, {\n    // 设置当前描述属性为可被循环\n    enumerable: true,\n    // 设置当前描述属性可被修改\n    configurable: true,\n    get() {\n      console.log('in get');\n      // 调用依赖收集器中的addSub，用于收集当前属性与Watcher中的依赖关系\n      dep.depend();\n      return val;\n    },\n    set(newVal) {\n      if (newVal === val) {\n        return;\n      }\n      val = newVal;\n      // 当值发生变更时，通知依赖收集器，更新每个需要更新的Watcher，\n      // 这里每个需要更新通过什么断定？dep.subs\n      dep.notify();\n    }\n  });\n}\n\nconst observe = function(data) {\n  return new Observer(data);\n}\n\nconst Vue = function(options) {\n  const self = this;\n  // 将data赋值给this._data，源码这部分用的Proxy所以我们用最简单的方式临时实现\n  if (options && typeof options.data === 'function') {\n    this._data = options.data.apply(this);\n  }\n  // 挂载函数\n  this.mount = function() {\n    new Watcher(self, self.render);\n  }\n  // 渲染函数\n  this.render = function() {\n    with(self) {\n      _data.text;\n    }\n  }\n  // 监听this._data\n  observe(this._data);  \n}\n\nconst Watcher = function(vm, fn) {\n  const self = this;\n  this.vm = vm;\n  // 将当前Dep.target指向自己\n  Dep.target = this;\n  // 向Dep方法添加当前Wathcer\n  this.addDep = function(dep) {\n    dep.addSub(self);\n  }\n  // 更新方法，用于触发vm._render\n  this.update = function() {\n    console.log('in watcher update');\n    fn();\n  }\n  // 这里会首次调用vm._render，从而触发text的get\n  // 从而将当前的Wathcer与Dep关联起来\n  this.value = fn();\n  // 这里清空了Dep.target，为了防止notify触发时，不停的绑定Watcher与Dep，\n  // 造成代码死循环\n  Dep.target = null;\n}\n\nconst Dep = function() {\n  const self = this;\n  // 收集目标\n  this.target = null;\n  // 存储收集器中需要通知的Watcher\n  this.subs = [];\n  // 当有目标时，绑定Dep与Wathcer的关系\n  this.depend = function() {\n    if (Dep.target) {\n      // 这里其实可以直接写self.addSub(Dep.target)，\n      // 没有这么写因为想还原源码的过程。\n      Dep.target.addDep(self);\n    }\n  }\n  // 为当前收集器添加Watcher\n  this.addSub = function(watcher) {\n    self.subs.push(watcher);\n  }\n  // 通知收集器中所的所有Wathcer，调用其update方法\n  this.notify = function() {\n    for (let i = 0; i < self.subs.length; i += 1) {\n      self.subs[i].update();\n    }\n  }\n}\n\nconst vue = new Vue({\n  data() {\n    return {\n      text: 'hello world'\n    }; \n  }\n})\n\nvue.mount(); // in get\nvue._data.text = '123'; // in watcher update /n in get\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br"),a("span",{staticClass:"line-number"},[n._v("104")]),a("br"),a("span",{staticClass:"line-number"},[n._v("105")]),a("br"),a("span",{staticClass:"line-number"},[n._v("106")]),a("br"),a("span",{staticClass:"line-number"},[n._v("107")]),a("br"),a("span",{staticClass:"line-number"},[n._v("108")]),a("br"),a("span",{staticClass:"line-number"},[n._v("109")]),a("br"),a("span",{staticClass:"line-number"},[n._v("110")]),a("br"),a("span",{staticClass:"line-number"},[n._v("111")]),a("br"),a("span",{staticClass:"line-number"},[n._v("112")]),a("br"),a("span",{staticClass:"line-number"},[n._v("113")]),a("br"),a("span",{staticClass:"line-number"},[n._v("114")]),a("br"),a("span",{staticClass:"line-number"},[n._v("115")]),a("br"),a("span",{staticClass:"line-number"},[n._v("116")]),a("br"),a("span",{staticClass:"line-number"},[n._v("117")]),a("br"),a("span",{staticClass:"line-number"},[n._v("118")]),a("br")])]),a("h3",{attrs:{id:"computed和watch区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#computed和watch区别是什么"}},[n._v("#")]),n._v(" Computed和Watch区别是什么?")]),n._v(" "),a("p",[n._v("计算属性和watch实际上都有监听属性变化的能力。只不过计算属性可以当做Vue实例上的响应式数据使用(通过Object.defineProperty定义了同名属性)，会自动监听计算属性函数调用到的响应式数据的变更，并且会返回计算属性函数的返回值；watcher是显式的为要监听的数据创建一个Watcher监听数据变更，不能作为vue实例上的响应式数据值使用。")]),n._v(" "),a("p",[n._v("计算属性 computed")]),n._v(" "),a("ol",[a("li",[n._v("支持缓存，只有依赖数据发生改变，才会重新进行计算；")]),n._v(" "),a("li",[n._v("不支持异步，当 computed 内有异步操作时无效，无法监听数据的变化；")]),n._v(" "),a("li",[n._v("computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的。也就是基于 data 中声明过或者父组件传递的 props 中的数据通过计算得到的值；")]),n._v(" "),a("li",[n._v("如果一个属性是由其他属性计算而来的，这个属性依赖其他属性 是一个多对一或者一对一，一般用computed；")]),n._v(" "),a("li",[n._v("如果 computed 属性值是函数，那么默认会走 get 方法，函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个 set 方法，当数据变化时，调用 set 方法；")])]),n._v(" "),a("p",[n._v("侦听属性 watch：")]),n._v(" "),a("ol",[a("li",[n._v("不支持缓存，数据变化，直接会触发相应的操作；")]),n._v(" "),a("li",[n._v("watch 支持异步操作；")]),n._v(" "),a("li",[n._v("监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；")]),n._v(" "),a("li",[n._v("当一个属性发生变化时，需要执行对应的操作，一对多；")]),n._v(" "),a("li",[n._v("监听数据必须是 data 中声明过或者父组件传递过来的 props 中的数据。当数据变化时触发其他操作，函数有两个参数：\nimmediate：组件加载立即触发回调函数执行；\ndeep: 深度监听；为了发现对象内部值的变化，复杂类型的数据时使用，例如：数组中的对象内容的改变，注意：监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到；")])]),n._v(" "),a("p",[n._v("总结：在 computed 和 watch 方面，一个是计算，一个是观察，在语义上是有区别的。\n当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的，这是和 computed 最大的区别。")]),n._v(" "),a("h3",{attrs:{id:"vue-diff算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-diff算法"}},[n._v("#")]),n._v(" Vue diff算法")]),n._v(" "),a("p",[n._v("diff的过程就是调用patch函数，就像打补丁一样修改真实dom")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// body下的 <div id=\"v\" class=\"classA\"><div> 对应的 oldVnode 就是\n\n{\n  el:  div  //对真实的节点的引用，本例中就是document.querySelector('#id.classA')\n  tagName: 'DIV',   //节点的标签\n  sel: 'div#v.classA'  //节点的选择器\n  data: null,       // 一个存储节点属性的对象，对应节点的el[prop]属性，例如onclick , style\n  children: [], //存储子节点的数组，每个子节点也是vnode结构\n  text: null,    //如果是文本节点，对应文本节点的textContent，否则为null\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("ol",[a("li",[n._v("sameVnode函数就是看这两个节点是否值得比较，代码相当简单：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function sameVnode(oldVnode, vnode){\n\treturn vnode.key === oldVnode.key && vnode.sel === oldVnode.sel\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("p",[n._v("当节点不值得比较，进入else中:\n取得oldvnode.el的父节点，parentEle是真实dom\ncreateEle(vnode)会为vnode创建它的真实dom，令vnode.el =真实dom\nparentEle将新的dom插入，移除旧的dom\n当不值得比较时，新节点直接把老节点整个替换了")]),n._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[n._v("两个节点值得比较时，会调用patchVnode函数")])]),n._v(" "),a("p",[n._v("首先，我们拿到新旧节点的数组，然后初始化四个指针，分别指向新旧节点的开始位置和结束位置，进行两两对比，若是 新的开始节点和旧开始节点相同，则都向后面移动，若是结尾节点相匹配，则都前移指针。若是新开始节点和旧结尾节点匹配上了，则会将旧的结束节点移动到旧的开始节点前。若是旧开始节点和新的结束节点相匹配，则会将旧开始节点移动到旧结束节点的后面。若是上述节点都没配有匹配上，则会进行一个兜底逻辑的判断，判断开始节点是否在旧节点中，若是存在则复用，若是不存在则创建。最终跳出循环，进行裁剪或者新增，若是旧的开始节点小于旧的结束节点，则会删除之间的节点，反之则是新增新的开始节点到新的结束节点。")]),n._v(" "),a("h2",{attrs:{id:"js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[n._v("#")]),n._v(" js")]),n._v(" "),a("h3",{attrs:{id:"数组扁平化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组扁平化"}},[n._v("#")]),n._v(" 数组扁平化")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("let arr = [1, [2, [3, 4, 5]]];\nfunction flatten(arr) {\n  let result = [];\n\n  for(let i = 0; i < arr.length; i++) {\n    if(Array.isArray(arr[i])) {\n      result = result.concat(flatten(arr[i]));\n    } else {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("h3",{attrs:{id:"手写深拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手写深拷贝"}},[n._v("#")]),n._v(" 手写深拷贝")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/**\n * 深拷贝\n * @param {Object} obj 要拷贝的对象\n * @param {Map} map 用于存储循环引用对象的地址\n */\n\nfunction deepClone(obj = {}, map = new Map()) {\n  if (typeof obj !== "object") {\n    return obj;\n  }\n  if (map.get(obj)) {\n    return map.get(obj);\n  }\n\n  let result = {};\n  // 初始化返回结果\n  if (\n    obj instanceof Array ||\n    // 加 || 的原因是为了防止 Array 的 prototype 被重写，Array.isArray 也是如此\n    Object.prototype.toString(obj) === "[object Array]"\n  ) {\n    result = [];\n  }\n  // 防止循环引用\n  map.set(obj, result);\n  for (const key in obj) {\n    // 保证 key 不是原型属性\n    if (obj.hasOwnProperty(key)) {\n      // 递归调用\n      result[key] = deepClone(obj[key], map);\n    }\n  }\n\n  // 返回结果\n  return result;\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br")])]),a("h3",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[n._v("#")]),n._v(" 闭包")]),n._v(" "),a("p",[n._v("在一个函数中返回一个函数就形成了闭包\n执行环境")]),n._v(" "),a("h3",{attrs:{id:"call-apply-bind的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-apply-bind的实现"}},[n._v("#")]),n._v(" call apply bind的实现")]),n._v(" "),a("p",[n._v("call")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('Function.prototype.myCall = function (context) {\n  // 判断调用对象\n  if (typeof this !== "function") {\n    throw new Error("Type error");\n  }\n  // 首先获取参数\n  let args = [...arguments].slice(1);\n  let result = null;\n  // 判断 context 是否传入，如果没有传就设置为 window\n  context = context || window;\n  // 将被调用的方法设置为 context 的属性\n  // this 即为我们要调用的方法\n  context.fn = this;\n  // 执行要被调用的方法\n  result = context.fn(...args);\n  // 删除手动增加的属性方法\n  delete context.fn;\n  // 将执行结果返回\n  return result;\n};\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br")])]),a("p",[n._v("apply")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('Function.prototype.myApply = function (context) {\n  if (typeof this !== "function") {\n    throw new Error("Type error");\n  }\n  let result = null;\n  context = context || window;\n  // 与上面代码相比，我们使用 Symbol 来保证属性唯一\n  // 也就是保证不会重写用户自己原来定义在 context 中的同名属性\n  const fnSymbol = Symbol();\n  context[fnSymbol] = this;\n  // 执行要被调用的方法\n  if (arguments[1]) {\n    result = context[fnSymbol](...arguments[1]);\n  } else {\n    result = context[fnSymbol]();\n  }\n  delete context[fnSymbol];\n  return result;\n};\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("bind")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('Function.prototype.myBind = function (context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== "function") {\n    throw new Error("Type error");\n  }\n  // 获取参数\n  const args = [...arguments].slice(1),\n  const fn = this;\n  return function Fn() {\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      // 当前的这个 arguments 是指 Fn 的参数\n      args.concat(...arguments)\n    );\n  };\n};\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("h3",{attrs:{id:"new-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-实现"}},[n._v("#")]),n._v(" new 实现")]),n._v(" "),a("p",[n._v("首先创一个新的空对象。\n根据原型链，设置空对象的 "),a("strong",[n._v("proto")]),n._v(" 为构造函数的 prototype 。\n构造函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）。\n判断函数的返回值类型，如果是引用类型，就返回这个引用类型的对象。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function myNew(context) {\n  const obj = new Object();\n  obj.__proto__ = context.prototype;\n  const res = context.apply(obj, [...arguments].slice(1));\n  return typeof res === "object" ? res : obj;\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("h2",{attrs:{id:"vue相关面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue相关面试题"}},[n._v("#")]),n._v(" vue相关面试题")]),n._v(" "),a("h3",{attrs:{id:"vue3为什么要添加新的组合api-它可以解决哪些问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue3为什么要添加新的组合api-它可以解决哪些问题"}},[n._v("#")]),n._v(" vue3为什么要添加新的组合API，它可以解决哪些问题")]),n._v(" "),a("p",[n._v("在 Vue2.0 中，随着功能的增加，组件越来越复杂，维护起来也越来越难，而难以维护的根本原因是 Vue 的 API 设计迫使开发者使用监视、计算、方法 Option 组织代码，而不是实际的业务逻辑。")]),n._v(" "),a("p",[n._v("另外 Vue2.0 缺乏一个简单而低成本的机制来完成逻辑重用，虽然你可以 minxis 完全重用逻辑，但是当 mixin 更多的时候，就使得很难找到相应的数据，计算出来也许是从中 mixin 的方法，使得类型推断变得困难。")]),n._v(" "),a("p",[n._v("因此组合API外观，主要是解决选项API带来的问题，首先是代码组织，组合API开发者可以根据业务逻辑组织自己的代码，让代码更具可读性和可扩展性，也就是说，当下一个开发者接触到这段不是自己写的代码， 他可以更好地利用代码的组织来反转实际的业务逻辑，或者根据业务逻辑更好地理解代码。")]),n._v(" "),a("p",[n._v("二是实现代码的逻辑提取和重用，当然mixin逻辑提取和重用也可以实现，但就像我之前说的，多个mixin在作用于同一个组件时，很难看出mixin的属性，来源不明确，另外，多个mixin的属性存在变量命名冲突的风险。而 Composition API 恰恰解决了这两个问题。")])])}),[],!1,null,null,null);s.default=t.exports}}]);